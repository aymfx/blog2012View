import{_ as s,c as a,o as n,N as p}from"./chunks/framework.1f285265.js";const d=JSON.parse('{"title":"node.js深入浅出笔记7","description":"","frontmatter":{"title":"node.js深入浅出笔记7","date":"2017-09-04T13:51:31.000Z","tags":["node"]},"headers":[],"relativePath":"posts/前端/以前/node-js深入浅出笔记7-1.md"}'),l={name:"posts/前端/以前/node-js深入浅出笔记7-1.md"},o=p(`<h1 id="内存的控制" tabindex="-1">内存的控制 <a class="header-anchor" href="#内存的控制" aria-label="Permalink to &quot;内存的控制&quot;">​</a></h1><blockquote><p>node毕竟是在v8上跑的服务，v8的内存管理机制，在浏览器使用起来绰绰有余，但是对于node确有限制，对内存的需求还是很大的，但是浏览器能分配的内存不是很大，所以还是有些局限性</p></blockquote><h2 id="查看node内存的信息" tabindex="-1">查看node内存的信息 <a class="header-anchor" href="#查看node内存的信息" aria-label="Permalink to &quot;查看node内存的信息&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">memoryUsage</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">rss</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">21295104</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">heapTotal</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8425472</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">heapUsed</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3987064</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">external</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8942</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//heapTotal申请的总堆内存</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//heapUsed 当前使用量</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="v8提供了调整内存大小的命令" tabindex="-1">v8提供了调整内存大小的命令 <a class="header-anchor" href="#v8提供了调整内存大小的命令" aria-label="Permalink to &quot;v8提供了调整内存大小的命令&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//两者选其一</span></span>
<span class="line"><span style="color:#A6ACCD;">    node </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">max</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">old</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">space</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">size</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1700</span><span style="color:#A6ACCD;"> test</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#A6ACCD;">    node </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">max</span><span style="color:#89DDFF;">-new-</span><span style="color:#A6ACCD;">space</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">size</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1024</span><span style="color:#A6ACCD;"> test</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="v8的垃圾回收机制" tabindex="-1">v8的垃圾回收机制 <a class="header-anchor" href="#v8的垃圾回收机制" aria-label="Permalink to &quot;v8的垃圾回收机制&quot;">​</a></h2><blockquote><p>v8的内存分代图</p></blockquote><p><img src="https://aymfx.github.io/img/a20170904/a1.png" alt="流程图"></p><blockquote><p>node --max-old-space-size 用于设置老生带最大值</p></blockquote><blockquote><p>node --max-new-space-size用于设置新生代最大值</p></blockquote><blockquote><p>在不设置内存的情况默认 老生代默认64位约1400mb 32位约700mb</p></blockquote><blockquote><p>如图所示 源代码</p></blockquote><p><img src="https://aymfx.github.io/img/a20170904/a2.png" alt="流程图"></p><blockquote><p>对于新生代,它由两个 reserved_semispace_size所组成,一个reserved_semispace_size 的64位约16m，32位约8m。</p></blockquote><blockquote><p>下图就可以解释 v8堆内存在64位上有1464mb,在32位上有732mb</p></blockquote><p><img src="https://aymfx.github.io/img/a20170904/a3.png" alt="流程图"></p><blockquote><p>Scavenge算法</p></blockquote><p><img src="https://aymfx.github.io/img/a20170904/a4.png" alt="流程图"></p><blockquote><p>当一个对象经过多次复制依然存活时，它将会被认为是生命周期较长的对象，这种较长生命周期的对象随后会被移动到老生代中，这种过程叫做晋升</p></blockquote><p><img src="https://aymfx.github.io/img/a20170904/a5.png" alt="流程图"></p><p><img src="https://aymfx.github.io/img/a20170904/a6.png" alt="流程图"></p><blockquote><p>老生代处理的算法 懵逼了 Mark-Sweep &amp; Mark-Compact</p></blockquote><ul><li>看看书，先带过</li></ul><blockquote><p>用命令行查看垃圾回收日志</p></blockquote><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--trace_gc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">var a=[];for(var i=0;i&lt;1000000;i++) a.push(new Array(100));</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gc.log</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><blockquote><p>通过分析垃圾回收日志，可以了解垃圾回收的运行状况，找出那些阶段比较耗时</p></blockquote><blockquote><p>使用--prof参数，可以分析v8执行的性能以及垃圾回收所占用的时间</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//app.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F78C6C;">1000000</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">={};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--prof</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">app.js</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">//运行</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div>`,30),e=[o];function t(c,r,i,y,D,F){return n(),a("div",null,e)}const A=s(l,[["render",t]]);export{d as __pageData,A as default};
