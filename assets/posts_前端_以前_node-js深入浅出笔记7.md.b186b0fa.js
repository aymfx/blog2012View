import{_ as s,c as a,o as n,N as l}from"./chunks/framework.1f285265.js";const A=JSON.parse('{"title":"node.js深入浅出笔记1","description":"","frontmatter":{"title":"node.js深入浅出笔记1","date":"2017-08-25T10:16:34.000Z","tags":["node"]},"headers":[],"relativePath":"posts/前端/以前/node-js深入浅出笔记7.md"}'),o={name:"posts/前端/以前/node-js深入浅出笔记7.md"},p=l(`<h1 id="commonjs的模块定义" tabindex="-1">commonjs的模块定义 <a class="header-anchor" href="#commonjs的模块定义" aria-label="Permalink to &quot;commonjs的模块定义&quot;">​</a></h1><blockquote><p>模块引用 ，模块定义 模块标识</p></blockquote><h2 id="模块引用" tabindex="-1">模块引用 <a class="header-anchor" href="#模块引用" aria-label="Permalink to &quot;模块引用&quot;">​</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">math</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">require</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">math</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">//require用于引用一个api模块，括号里面的称为模块标识</span></span>
<span class="line"></span></code></pre></div><h2 id="模块的定义" tabindex="-1">模块的定义 <a class="header-anchor" href="#模块的定义" aria-label="Permalink to &quot;模块的定义&quot;">​</a></h2><blockquote><p>在node中，一个文件就是一个模块，将方法挂在到exports对象上作为属性可以导出</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">exports.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">b</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//export 是唯一导出方法的方式</span></span>
<span class="line"></span></code></pre></div><h2 id="模块标识" tabindex="-1">模块标识 <a class="header-anchor" href="#模块标识" aria-label="Permalink to &quot;模块标识&quot;">​</a></h2><blockquote><p>指的就是require()中的参数</p></blockquote><ul><li>核心模块 http fs path等</li><li>.或者..开始的相对路劲的文件模块</li><li>以/开始的绝对路劲的模块</li><li>非路径形式的模块文件，自定模块</li></ul><h1 id="node-的模块实现" tabindex="-1">node 的模块实现 <a class="header-anchor" href="#node-的模块实现" aria-label="Permalink to &quot;node 的模块实现&quot;">​</a></h1><blockquote><p>引入模块需要经历三个步奏 路劲定位 文件定位 编译执行</p></blockquote><h2 id="核心模块与用户模块的区别以及加载速度" tabindex="-1">核心模块与用户模块的区别以及加载速度 <a class="header-anchor" href="#核心模块与用户模块的区别以及加载速度" aria-label="Permalink to &quot;核心模块与用户模块的区别以及加载速度&quot;">​</a></h2><ul><li>核心模块，在node启动时已经被编译好了，核心部分都写在内存，只需做路劲分析就好，加载速度最快</li><li>文件模块，则是运行时动态加载，以上路径分析，文件定位，编译都要走，所以最慢呀</li></ul><h2 id="优先加载缓存" tabindex="-1">优先加载缓存 <a class="header-anchor" href="#优先加载缓存" aria-label="Permalink to &quot;优先加载缓存&quot;">​</a></h2><blockquote><p>核心模块，和用户模块都会被缓存，优先去取缓存的东西，顺序--&gt; 缓存核心模块&lt;-&lt;-缓存用户模块&lt;-核心模块&lt;-用户模块</p></blockquote><h2 id="文件定位" tabindex="-1">文件定位 <a class="header-anchor" href="#文件定位" aria-label="Permalink to &quot;文件定位&quot;">​</a></h2><ul><li>扩展名分析 : 查找顺序 .js &gt; .node &gt; .json</li><li>目录分析和包 : 首先会检查包下面的package.json ,通过json.parse() 取出main属性指定文件名进行定位，如果main错误或不存在，则默认index文件名查找，还没找到就抛出异常</li></ul><h1 id="模块的编译" tabindex="-1">模块的编译 <a class="header-anchor" href="#模块的编译" aria-label="Permalink to &quot;模块的编译&quot;">​</a></h1><blockquote><p>module对象</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Module</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">parent</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">exports</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">={};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">parent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parent</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">parent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parent</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">parent</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">filename</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">loaded</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">children</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><blockquote><p>载入以及编译</p></blockquote><ul><li>.js 用fs模块同步读取文件后进行编译</li><li>.node 这是c/c++编写的扩展文件，通过dlopen()方式进行加载最后编译生成的文件</li><li>.json 用fs模块同步读取文件后，用JSON.parse()解析返回结果</li><li>其余扩展名，都被当做.js文件载入</li></ul><blockquote><p>每个编译成功的模块，路劲作为索引都会缓存在Module.<em>cache对象上</em></p></blockquote><h2 id="举个-json的加载的例子" tabindex="-1">举个.json的加载的例子 <a class="header-anchor" href="#举个-json的加载的例子" aria-label="Permalink to &quot;举个.json的加载的例子&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Module</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_extensoins[</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">filename</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">va</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">content</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NativeModule</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFileSync</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">filename</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">\\</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">module.exports</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">parse</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">stripBOM</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">content</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">message</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">filename</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Module._extensions 会被赋值给require()的extensions属性</span></span>
<span class="line"></span></code></pre></div><h1 id="javascript模块的编译" tabindex="-1">Javascript模块的编译 <a class="header-anchor" href="#javascript模块的编译" aria-label="Permalink to &quot;Javascript模块的编译&quot;">​</a></h1><blockquote><p>由于模块文件实际在编译过程会被node包装，所以我们才可以调用几个常用的方法，包装后通过vm原生模块runInThisContext()方法执行（类似eval,有明确上下文，不污染全局），返回function对象</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//包装后</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    (</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">require</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">_filename</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">_dirname</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">         </span><span style="color:#676E95;font-style:italic;">//模块内容</span></span>
<span class="line"><span style="color:#F07178;">            </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">) </span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h1 id="编译核心模块" tabindex="-1">编译核心模块 <a class="header-anchor" href="#编译核心模块" aria-label="Permalink to &quot;编译核心模块&quot;">​</a></h1><blockquote><p>源文件通过process.binding(&#39;natives&#39;)取出，编译成功的模块缓存到NativeModule._cache对象上，文件模块则缓存Module.cache对象上</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NativeModule</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">filename</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">exports</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">loaded</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    NativeModule</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_source </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">binding</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">natives</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    NativeModule</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_cache </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span></code></pre></div><h1 id="c-c-核心模块的编译" tabindex="-1">c/c++核心模块的编译 <a class="header-anchor" href="#c-c-核心模块的编译" aria-label="Permalink to &quot;c/c++核心模块的编译&quot;">​</a></h1><blockquote><p>由纯c/c++编写的部分统一称为内建模块，通常不被用户直接调用</p></blockquote><blockquote><p>内建模块的导出 (依赖关系)</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">    文件模块 </span><span style="color:#89DDFF;">&lt;---</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">核心模块</span><span style="color:#A6ACCD;">(javascript) </span><span style="color:#89DDFF;">&lt;---</span><span style="color:#82AAFF;">内建模块</span><span style="color:#A6ACCD;">(c</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><blockquote><p>加载内建模块时，先创建exports空对象，然后调用get_builtin_module()方法取出内建模块对象，通过执行register_func()填充exports对象，最后将exports对象按模块名缓存，并返回给调用方完成导出</p></blockquote><h1 id="包与npm" tabindex="-1">包与npm <a class="header-anchor" href="#包与npm" aria-label="Permalink to &quot;包与npm&quot;">​</a></h1><blockquote><p>commonjs规范:前者用于组织包中的各种的文件，后者则用于描述包的相关信息，以供外部读取分析</p></blockquote><h2 id="包结构-符合commonjs规范" tabindex="-1">包结构（符合commonjs规范） <a class="header-anchor" href="#包结构-符合commonjs规范" aria-label="Permalink to &quot;包结构（符合commonjs规范）&quot;">​</a></h2><ul><li>package.json:包描述文件</li><li>bin:存放二进制文件的目录</li><li>lib:用于存放JavaScript代码的目录</li><li>doc:用于存放文档的目录</li><li>test:用于存放单元测试的代码</li></ul><h2 id="包描述文件-package-josn-与npm" tabindex="-1">包描述文件（package.josn）与npm <a class="header-anchor" href="#包描述文件-package-josn-与npm" aria-label="Permalink to &quot;包描述文件（package.josn）与npm&quot;">​</a></h2><ul><li>参考之前的文章</li></ul><h2 id="npm常用功能" tabindex="-1">npm常用功能 <a class="header-anchor" href="#npm常用功能" aria-label="Permalink to &quot;npm常用功能&quot;">​</a></h2><ul><li>查看帮助 npm -v</li><li>安装依赖包 npm i package</li><li></li></ul>`,45),e=[p];function t(c,r,i,F,y,D){return n(),a("div",null,e)}const d=s(o,[["render",t]]);export{A as __pageData,d as default};
