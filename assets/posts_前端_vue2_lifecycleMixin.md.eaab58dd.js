import{_ as s,c as a,o as n,N as l}from"./chunks/framework.1f285265.js";const C=JSON.parse('{"title":"lifecycleMixin 函数","description":"lifecycleMixin 函数","frontmatter":{"title":"lifecycleMixin 函数","date":"2022-01-22T00:00:00.000Z","description":"lifecycleMixin 函数","tags":["vue2"]},"headers":[],"relativePath":"posts/前端/vue2/lifecycleMixin.md"}'),o={name:"posts/前端/vue2/lifecycleMixin.md"},p=l(`<blockquote><p>这个方法帮助 Vue 构造函数挂载了实例和生命周期相关的方法</p></blockquote><ul><li>vm._update 一个内部的私有的组件更新</li><li>vm.$destory() 完全销毁一个实例。清理它与其它实例的连接，解绑它的全部指令及事件监听器。</li><li>vm.$forceUpdate() 迫使 Vue 实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// /Users/liuyang/aymfx/gitRepository/vue-analyse/src/core/instance/lifecycle.ts</span></span>
<span class="line"><span style="color:#FFCB6B;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_update</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">vnode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">hydrating</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$forceUpdate</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$destroy</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span></code></pre></div><p>从上面可以看出_update 函数是接受一个虚拟组件实例的，组件内部更新就是靠这个方法实现的，具体的实现规则，暂时不暂开讲解</p><p>流程图 <img src="https://raw.githubusercontent.com/aymfx/pic/mian/img/20220829110548.png" alt="20220829110548"></p>`,5),e=[p];function t(c,r,i,y,D,F){return n(),a("div",null,e)}const u=s(o,[["render",t]]);export{C as __pageData,u as default};
