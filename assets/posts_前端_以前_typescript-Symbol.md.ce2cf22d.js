import{_ as s,c as l,o as a,N as n}from"./chunks/framework.1f285265.js";const F=JSON.parse('{"title":"typescript-Symbol","description":"","frontmatter":{"title":"typescript-Symbol","tags":["typescript"],"date":"2018-06-14T16:29:33.000Z"},"headers":[],"relativePath":"posts/前端/以前/typescript-Symbol.md"}'),o={name:"posts/前端/以前/typescript-Symbol.md"},p=n(`<p><img src="https://upload-images.jianshu.io/upload_images/10843623-d1427ac46b2dd12f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="typescript"></p><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><blockquote><p>Symbol 新的原生类型</p></blockquote><ul><li>symbol 类型的值是通过 Symbol 构造函数创建的</li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> sym1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> sym2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 可选的字符串key</span></span>
<span class="line"></span></code></pre></div><ul><li>Symbols 是不可改变且唯一的</li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> sym2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> sym3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">sym2 </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> sym3 </span><span style="color:#676E95;font-style:italic;">// false, symbols是唯一的</span></span>
<span class="line"></span></code></pre></div><ul><li>像字符串一样，symbols 也可以被用做对象属性的键。</li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> sym </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">sym</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj[sym]) </span><span style="color:#676E95;font-style:italic;">// &quot;value&quot;</span></span>
<span class="line"></span></code></pre></div><ul><li>Symbols 也可以与计算出的属性名声明相结合来声明对象的属性和类成员。</li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> getClassNameSymbol </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">C</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    [getClassNameSymbol]</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">C</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">C</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> className </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> c[getClassNameSymbol]() </span><span style="color:#676E95;font-style:italic;">// &quot;C&quot;</span></span>
<span class="line"></span></code></pre></div><ul><li>Symbol.hasInstance <blockquote><p>方法，会被 instanceof 运算符调用。构造器对象用来识别一个对象是否是其实例。</p></blockquote></li><li>Symbol.isConcatSpreadable <blockquote><p>布尔值，表示当在一个对象上调用 Array.prototype.concat 时，这个对象的数组元素是否可展开</p></blockquote></li><li>Symbol.iterator <blockquote><p>方法，被 for-of 语句调用。返回对象的默认迭代器</p></blockquote></li><li>Symbol.match <blockquote><p>方法，被 String.prototype.match 调用。正则表达式用来匹配字符串。</p></blockquote></li><li>Symbol.replace <blockquote><p>方法，被 String.prototype.search 调用。正则表达式返回被匹配部分在字符串中的索引。</p></blockquote></li><li>Symbol.species <blockquote><p>函数值，为一个构造函数。用来创建派生对象。</p></blockquote></li><li>Symbol.split <blockquote><p>方法，被 String.prototype.split 调用。正则表达式来用分割字符串。</p></blockquote></li><li>Symbol.toPrimitive <blockquote><p>方法，被 ToPrimitive 抽象操作调用。把对象转换为相应的原始值。</p></blockquote></li><li>Symbol.toStringTag <blockquote><p>方法，被内置方法 Object.prototype.toString 调用。返回创建对象时默认的字符串描述。</p></blockquote></li><li>Symbol.unscopables <blockquote><p>对象，它自己拥有的属性会被 with 作用域排除在外</p></blockquote></li></ul>`,12),e=[p];function t(c,y,r,i,C,D){return a(),l("div",null,e)}const m=s(o,[["render",t]]);export{F as __pageData,m as default};
