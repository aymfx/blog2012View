import{_ as l,c as i,o as a,N as t}from"./chunks/framework.1f285265.js";const f=JSON.parse('{"title":"javascipt变量","description":"","frontmatter":{"title":"javascipt变量","date":"2016-07-22T00:00:00.000Z","tags":["js"]},"headers":[],"relativePath":"posts/前端/以前/javascipt变量.md"}'),e={name:"posts/前端/以前/javascipt变量.md"},r=t(`<h1 id="javascript变量" tabindex="-1">JavaScript变量 <a class="header-anchor" href="#javascript变量" aria-label="Permalink to &quot;JavaScript变量&quot;">​</a></h1><h2 id="命名" tabindex="-1">命名 <a class="header-anchor" href="#命名" aria-label="Permalink to &quot;命名&quot;">​</a></h2><h3 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h3><ul><li>匈牙利命名法：变量名=类型+对象描述 <ul><li>Int整形 i</li><li>Float浮点 fl</li><li>Boolean布尔 b</li><li>String字符串 s</li><li>Array数组 a</li><li>Object对象 o</li><li>Function函数 fn</li><li>Regular Expressino 正则 re</li></ul></li><li>驼峰命名法 <ul><li>全部小写：单词与单词用下划线分割</li><li>大小写混合 <ul><li>大驼峰:每个首字母大写</li><li>小驼峰:第一个单词首字母小写，其他首字母大写</li></ul></li></ul></li></ul><h3 id="规则" tabindex="-1">规则 <a class="header-anchor" href="#规则" aria-label="Permalink to &quot;规则&quot;">​</a></h3><ul><li><p>首字符:英文或者下滑线或者$符号</p><pre><code> 	 var $a=&quot;asd&quot;;

 	 alert($a);
</code></pre></li><li><p>组成：英文字母，数字，下划线 $符号</p></li><li><p>禁忌：不能使用关键字和保留字</p></li></ul><h2 id="声明" tabindex="-1">声明 <a class="header-anchor" href="#声明" aria-label="Permalink to &quot;声明&quot;">​</a></h2><ul><li>显示声明：var 变量名</li><li>陋习 <ul><li>没有类型</li><li>重复声明</li><li>隐式声明</li><li>不声明直接赋值</li></ul></li><li>正解 <ul><li>先声明，后读写</li><li>先赋值，后运算</li></ul></li></ul><h2 id="变量类型" tabindex="-1">变量类型 <a class="header-anchor" href="#变量类型" aria-label="Permalink to &quot;变量类型&quot;">​</a></h2><ul><li>值类型 <ul><li>占用空间固定，保存在栈中</li><li>保存与复制的是值本身</li><li>使用typeof检测数据的类型</li><li>基本数据类型是值类型</li></ul></li><li>引用类型 <ul><li>占用空间不固定，保存在堆中</li><li>保存和赋值的是指向对象的指针</li><li>使用instanceof检测数据类型</li><li>使用new()方法构造出的对象是引用类型</li></ul></li></ul><h2 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-label="Permalink to &quot;作用域&quot;">​</a></h2><ul><li>全局变量 <ul><li>包含 <ul><li>在函数体外定义的变量</li><li>在函数内部定义的无var的变量</li></ul></li><li>调用:任何位置</li></ul></li><li>局部变量 <ul><li>包含 <ul><li>在函数内使用var声明的变量</li><li>函数的参数变量</li></ul></li><li>调用：在当前函数体内使用</li></ul></li><li>优先级 <ul><li>局部同名变量&gt;局部同名参数&gt;全局同名变量</li></ul></li><li>特性 <ul><li>忽略块级作用域</li><li>全局变量是全局对象的属性</li><li>局部变量是调用对象的属性</li><li>作用域链 <ul><li>内层函数可以访问外层函数的局部变量</li><li>外层函数不能访问内层函数的局部变量</li></ul></li><li>生命周期 <ul><li>全局变量：除非被显示删除，否则一直存在</li><li>局部变量：自声明起至函数运行完毕或显示删除</li><li>回收机制 <ul><li>标记清除</li><li>引用计数</li></ul></li></ul></li></ul></li></ul>`,12),u=[r];function o(s,n,c,h,d,p){return a(),i("div",null,u)}const b=l(e,[["render",o]]);export{f as __pageData,b as default};
