import{_ as a,c as e,o as i,N as t}from"./chunks/framework.1f285265.js";const u=JSON.parse('{"title":"时序图","description":"时序图的使用方式","frontmatter":{"title":"时序图","date":"2022-06-30T00:00:00.000Z","description":"时序图的使用方式","tags":["工具"]},"headers":[],"relativePath":"posts/前端/时序图.md"}'),p={name:"posts/前端/时序图.md"},r=t('<h2 id="wiki-上的解释" tabindex="-1">wiki 上的解释 <a class="header-anchor" href="#wiki-上的解释" aria-label="Permalink to &quot;wiki 上的解释&quot;">​</a></h2><p>序列图（Sequence Diagram），亦称为循序图、时序图，是一种 UML 行为图。描述物件在时间序列中的交叉作用。序列图会描绘在此情境下有关的物件，以及此物件和其他物件交换讯息的顺序。序列图一般和待开发系统逻辑视图上，用例的实现有关。序列图有时也称为事件图或事件情境。</p><p>序列图中会绘出许多同时存在的不同物件（以垂直线表示，线的开始及结束为生命线，表示物件的产生及结束），而物件之间横向的箭头，表示物件之间交换的讯息，会以发生的先后顺序来排列。因此可以用图形的方式，简单说明用例在执行时的情形。</p><h2 id="作为程序员的的使用场景" tabindex="-1">作为程序员的的使用场景 <a class="header-anchor" href="#作为程序员的的使用场景" aria-label="Permalink to &quot;作为程序员的的使用场景&quot;">​</a></h2><p>我们需要开发某项具体业务之前，业务本身很复杂，涉及的角色很多，我们需要用一种流程规范进行梳理，同时也为后期修改和新增内容，提供一个脑图，不会因为不懂业务导致改出 bug 或者埋下新的 bug</p><h2 id="时序图的-7-大要素" tabindex="-1">时序图的 7 大要素 <a class="header-anchor" href="#时序图的-7-大要素" aria-label="Permalink to &quot;时序图的 7 大要素&quot;">​</a></h2><ul><li><p><code>角色(Actor)</code> 系统角色，可以是人、及其甚至其他的系统或者子系统。 <img src="https://aymfx.github.io/pic/img/adasdasdadasd.png" alt="img"></p></li><li><p><code>对象（Object）</code> 对象代表时序图中的对象在交互中所扮演的角色，位于时序图顶部和对象代表</p></li></ul><p><strong>类角色</strong> 对象一般包含以下三种命名方式：</p><p>第一种方式包含对象名和类名。 小明：人</p><p>第二种方式只显示类名不显示对象名，即为一个匿名对象。 人</p><p>第三种方式只显示对象名不显示类名。 小明</p><p><img src="https://aymfx.github.io/pic/img/d7397028-8138-4a55-aaa4-cacd1c58f494.png" alt="d7397028-8138-4a55-aaa4-cacd1c58f494"></p><ul><li><code>生命线(LifeLine)</code> 生命线代表时序图中的对象在一段时期内的存在。时序图中每个对象和底部中心都有一条垂直的虚线，这就是对象的生命线，对象间 的消息存在于两条虚线间。</li></ul><p><img src="https://aymfx.github.io/pic/img/image-20220804121805881.png" alt="image-20220804121805881"></p><ul><li><code>控制焦点(Activation)</code> 控制焦点代表时序图中的对象执行一项操作的时期，在时序图中每条生命线上的窄的矩形代表活动期。</li></ul><p><img src="https://aymfx.github.io/pic/img/image-20220804121819788.png" alt="image-20220804121819788"></p><ul><li><code>消息(Message)</code> 消息是定义交互和协作中交换信息的类，用于对实体间的通信内容建模，信息用于在实体间传递信息。允许实体请求其他的服务，类角色通过发送和接受信息进行通信。</li></ul><p><strong>消息类型</strong> 包含以下四种：</p><p>第一种方式 同步消息=调用消息（Synchronous Message） 消息的发送者把控制权传递给消息的接收者，然后停止活动，等待消息的接收者放弃或者返回控制。用来表示同步的意义。</p><p>第二种方式 异步消息（Asynchronous Message） 消息发送者通过消息把信号传递给消息的接收者，然后继续自己的活动，不等待接受者返回消息或者控制。异步消息的接收者和发送者是并发工作的。</p><p>第三种方式 返回消息（Return Message） 返回消息表示从过程调用返回</p><p>第四种方式 自关联消息（Self-Message） 表示自身调用自己的方法,可能是为了处理某个数据</p><p><img src="https://aymfx.github.io/pic/img/image-20220804121835915.png" alt="image-20220804121835915"></p><p><img src="https://aymfx.github.io/pic/img/image-20220804121851609.png" alt="image-20220804121851609"></p><ul><li>组合片段 参考链接</li></ul><p><a href="https://www.cnblogs.com/cy568searchx/p/6227238.html" target="_blank" rel="noreferrer">组合片段</a></p><h2 id="好用的工具" tabindex="-1">好用的工具 <a class="header-anchor" href="#好用的工具" aria-label="Permalink to &quot;好用的工具&quot;">​</a></h2><p><a href="https://www.processon.com/i/5b06ac60e4b0595cc8a5a3dd" target="_blank" rel="noreferrer">ProcessOn</a> 不仅可以画时序图还有思维导图等等</p><p><img src="https://aymfx.github.io/pic/img/image-20220804121907396-20220804123916558-20220804124205581.png" alt="image-20220804121907396"></p><p><a href="https://aymfx.github.io/pic/img/202208041239538.png" target="_blank" rel="noreferrer">https://aymfx.github.io/pic/img/202208041239538.png</a></p>',30),o=[r];function s(c,g,l,n,h,m){return i(),e("div",null,o)}const _=a(p,[["render",s]]);export{u as __pageData,_ as default};
