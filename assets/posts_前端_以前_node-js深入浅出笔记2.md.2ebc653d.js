import{_ as s,c as n,o as a,N as l}from"./chunks/framework.1f285265.js";const C=JSON.parse('{"title":"node.js深入浅出笔记2","description":"","frontmatter":{"title":"node.js深入浅出笔记2","date":"2017-08-26T00:00:00.000Z","tags":["node"]},"headers":[],"relativePath":"posts/前端/以前/node-js深入浅出笔记2.md"}'),o={name:"posts/前端/以前/node-js深入浅出笔记2.md"},p=l(`<h1 id="node异步-i-o" tabindex="-1">node异步 I/O <a class="header-anchor" href="#node异步-i-o" aria-label="Permalink to &quot;node异步 I/O&quot;">​</a></h1><h2 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h2><blockquote><p>进程启动时，node会创建一个类似于while(true)的循环，每次执行一次循环我们称为tick，每个tick过程就是查看是否有事件待处理，有就取出相关的回调函数，存在回调就执行，否则让进入下个循环</p></blockquote><blockquote><p>如图所示</p></blockquote><p><img src="https://aymfx.github.io/img/fileImage/day20170826.png" alt="流程图"></p><h2 id="观察者" tabindex="-1">观察者 <a class="header-anchor" href="#观察者" aria-label="Permalink to &quot;观察者&quot;">​</a></h2><blockquote><p>监听每个事件处理，需要一个或者多个观察者，有观察者确定事件是否要被处理。事件循环是一个典型的生产者/消费者模型,异步i/o，网络请求等则是事件的生产者，源源不断的提供node不同类型的事件，这些事件被传递到观察者哪里，事件循环则是从观察者哪里取出事件并且处理</p></blockquote><blockquote><p>win 基于IOCP linux基于多线程</p></blockquote><h2 id="请求对象" tabindex="-1">请求对象 <a class="header-anchor" href="#请求对象" aria-label="Permalink to &quot;请求对象&quot;">​</a></h2><blockquote><p>node中的异步i/o调用而言，回调函数不是由开发者调用，实际上是javascript发起调用到内核执行完i/o操作的过度产物中，存在一种中间产物，他叫做请求对象，所有状态都保存在这个对象中，包括送入线程池等待执行以及i/o操作完毕后的回调函数</p></blockquote><h2 id="执行回调-如图所示" tabindex="-1">执行回调 如图所示 <a class="header-anchor" href="#执行回调-如图所示" aria-label="Permalink to &quot;执行回调 如图所示&quot;">​</a></h2><p><img src="https://aymfx.github.io/img/fileImage/day2017082602.png" alt="流程图"></p><blockquote><p>事件循环 观察者 请求对象 I/O线程池共同构成了node异步i/o模型的基本要素</p></blockquote><blockquote><p>小结:JavaScript是单线程，但是node本身是多线程。除了用户自身的代码无法并行执行外，其他的i/o都是可以并行的</p></blockquote><h2 id="非i-o的异步api" tabindex="-1">非I/O的异步API <a class="header-anchor" href="#非i-o的异步api" aria-label="Permalink to &quot;非I/O的异步API&quot;">​</a></h2><blockquote><p>他们是 setTimeout() setInterval() setImmediate() process.nextTick()</p></blockquote><blockquote><p>setTimeout 与setInterval() 与浏览器api一致，他们不需要i/o线程池的参加,下面是图示</p></blockquote><p><img src="https://aymfx.github.io/img/fileImage/day2017082603.png" alt="流程图"></p><blockquote><p>process.nextTick(callback) 类似setTimeout 但是执行效率比较高</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nextTick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">callback</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_exiting</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">tickDepth</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">maxTickDepth</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">maxTickWarn</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">tock</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">callback </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">callback</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">domain</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">tock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">domain</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">domain</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">nextTickQueue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">tock</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">nextTickQueue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_needTickCallback</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><blockquote><p>setImmediate() 类似于process.nextTick() 都是将函数延迟执行</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nextTick</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">延迟执行</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">正常执行</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//正常执行</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//延迟执行</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//两者的优先级</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setImmediate</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">延迟执行setImmediate</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nextTick</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">延迟执行nextTick</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">正常执行</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 正常执行</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 延迟执行nextTick</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 延迟执行setImmediate</span></span>
<span class="line"></span></code></pre></div><blockquote><p>事件循环是有先后顺序的 process.nextTick()属于idle观察者,setImmediate()属于check观察者 idle优于观察者i/o优于观察者check</p></blockquote><blockquote><p>process.nextTick()回调函数保存在数组中，每轮循环回到函数全部执行完，而setImmediate()保存在链表中，每轮循环中执行链表中的一个回调函数 一下就是例子,好像不对，运行结果有问题啊</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nextTick</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">延迟执行nextTick1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nextTick</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">延迟执行nextTick2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setImmediate</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">延迟执行setImmediate1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nextTick</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">我也执行l </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setImmediate</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">延迟执行setImmediate2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">正常执行</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 正常执行</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 延迟执行nextTick1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 延迟执行nextTick2</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 延迟执行setImmediate1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 延迟执行setImmediate2</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 我也执行l</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="事件驱动与高性能服务器" tabindex="-1">事件驱动与高性能服务器 <a class="header-anchor" href="#事件驱动与高性能服务器" aria-label="Permalink to &quot;事件驱动与高性能服务器&quot;">​</a></h2><blockquote><p>利用node构建的服务器，基于以下实现</p></blockquote><p><img src="https://aymfx.github.io/img/fileImage/day2017082604.png" alt="流程图"></p>`,28),e=[p];function t(c,r,y,F,i,D){return a(),n("div",null,e)}const u=s(o,[["render",t]]);export{C as __pageData,u as default};
